using System.Data;
using System.Diagnostics;
using System.Security.Cryptography;
using Microsoft.AspNetCore.Mvc;
using MySql.Data.MySqlClient;
using TestDatabase.Models;

namespace TestDatabase.Controllers
{
    public class MainController : Controller
    {
        string connString = "Server=studmysql01.fhict.local;Database=dbi515074;Uid=dbi515074;Pwd=AmineGPT;";

        public IActionResult Index()
        {
            List<int> Account_IDs = new();
            List<int> GewonnenWedstrijden = new();
            List<int> IDs = new();
            List<string> NamenTemp = new();
            
            int spelerID = -1;
            string spelerNaam = "BramvdBallen"; //ingelogde speler is nu nog hardcoded, moet dynamisch
            int spelerOverwinningen = -1;
            int spelerPositie = -1;

            using (MySqlConnection con = new(connString))
            {
                con.Open();
                    MySqlCommand sqlCom = new("Select `ID`, `Gebruikersnaam` From account", con);
                    MySqlDataReader reader = sqlCom.ExecuteReader();

                    //Adds the ID and Naam from all accounts to their representitive lists
                    while (reader.Read())
                    {
                        IDs.Add(reader.GetInt32(0));
                        NamenTemp.Add(reader.GetString(1));
                    
                        //Checks if the gebruikersnaam from the SQL-query equals the spelerNaam from the logged-in user
                        if (reader.GetString(1) == spelerNaam)
                        {
                            //Sets spelerID to the ID from the Database
                            spelerID = reader.GetInt32(0);
                        }
                    }
                con.Close();
            }

            using (MySqlConnection con = new(connString))
            {
                con.Open();
                    MySqlCommand sqlCom = new("Select `Account_ID`, `GewonnenWedstrijden` From statistieken ORDER BY `GewonnenWedstrijden` DESC", con);
                    MySqlDataReader reader = sqlCom.ExecuteReader();
                    
                    //Creates a variable to keep track of the current position in the table generated by the SQL-query
                    int currentPosInTable = 0;

                    //Adds the Account ID and GewonnenWedstrijden from statistieken to their representitive lists
                    while (reader.Read())
                    {
                        Account_IDs.Add(reader.GetInt32(0));
                        GewonnenWedstrijden.Add(reader.GetInt32(1));

                        //Increments the position in the table
                        currentPosInTable++;

                        //Checks if previously set spelerID equals the Account_ID from the statistieken table
                        if (reader.GetInt32(0) == spelerID)
                        {
                            //Sets the spelerOverwinningen to the data fetched from the Database
                            spelerOverwinningen = reader.GetInt32(1);
                            //Sets the spelerPositie to the current position in the table
                            spelerPositie = currentPosInTable;
                        }
                    }
                con.Close();
            }

            List<string> Namen = new();

            //Loops through all Account_IDs from the statistieken table
            for(int i = 0; i < Account_IDs.Count; i++)
            {
                //Loops through all saved names from the account table
                for(int j = 0; j < NamenTemp.Count; j++)
                {
                    //Checks if the Account_ID from statistieken equals the ID from the account
                    if (Account_IDs[i] == IDs[j])
                    {
                        //Adds the naam to the list in the order from highest to lowest gewonnenWedstrijden
                        Namen.Add(NamenTemp[j]);
                    }
                }
            }

            //VIEWDATAAAAAAAAAAAAAA WOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO FUCK YEAHHHHHHH
            ViewData["SpelerNaam"] = spelerNaam;
            ViewData["SpelerPositie"] = spelerPositie;
            ViewData["SpelerOverwinningen"] = spelerOverwinningen;

            ViewData["Namen"] = Namen;
            ViewData["Account_IDs"] = Account_IDs;
            ViewData["GewonnenWedstrijden"] = GewonnenWedstrijden;
            return View();
        }

        public IActionResult Spel(string gekozenSpel)
        {
            List<spel> spellen = new();
            using (MySqlConnection con = new(connString))
            {
                con.Open();
                MySqlCommand sqlCom = new("Select * From `spel`", con);
                MySqlDataReader reader = sqlCom.ExecuteReader();
                
                //Adds all known spellen to a list of spellen
                while (reader.Read())
                {
                    spel s = new()
                    {
                        naam = reader.GetString(1),
                        minimumSpelers = reader.GetInt32(2),
                        regels = reader.GetString(3),
                        winConiditie = reader.GetString(4)
                    };
                    spellen.Add(s);
                }
            }
            
            //Compares if the gekozenSpel equals any of the spellen in the list
            foreach(var spel in spellen)
            {
                if(gekozenSpel.ToLower() == spel.naam.ToLower())
                {
                    ViewData["gekozenSpel"] = spel;
                    ViewData["gekozenSpelID"] = 1;
                }
            }

            return View();
        }

        public IActionResult Wedstrijd(int ID)
        {
            ViewData["ID"] = ID;
            return View();
        }

        public int sendData(int Spel_ID, int User_ID, int Gewonnen, string User_IDs)
        {
            //Set ID to -1 so that it will return an error if unchanged
            int ID = -1;

            //Convert string of UIDs to String Array
            string[] User_IDList = User_IDs.Split(',');

            using (MySqlConnection con = new(connString))
            {
                MySqlDataReader reader;

                //Get the greatest ID from wedstrijd table
                con.Open();
                    MySqlCommand getIdCom = new("Select `ID` from `wedstrijd` ORDER BY `ID` ASC", con);
                    reader = getIdCom.ExecuteReader();

                    while (reader.Read())
                    {
                        ID = reader.GetInt32(0);
                    }
                con.Close();

                //Increment it so that it's a unique ID
                ID++;

                //Loop through all entries of IDs provided by user on the Spel page
                for (int i = 0; i < User_IDList.Length; i++)
                {
                    con.Open();
                        //Try to add the provided IDs of the users to the Database table
                        try{
                            using (var cmd = new MySqlCommand())
                            {
                                cmd.CommandText = $"INSERT INTO wedstrijd (ID, Spel_ID, Account_ID, Gewonnen) VALUES ({ID},{Spel_ID},{User_IDList[i]},{Gewonnen})";
                                cmd.CommandType = CommandType.Text;
                                cmd.Connection = con;

                                reader = cmd.ExecuteReader();
                            }
                        } catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                    con.Close();
                }
            }
            //Return the wedstrijd ID so that it can be used to fetch all wedstrijd data for the wedstrijd page 
            return ID;
        }
    }
}

